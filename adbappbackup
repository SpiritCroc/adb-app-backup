#!/usr/bin/env python3

import argparse
import os
import pickle
import shutil
import subprocess
import sys
import traceback
import time

from datetime import datetime

backup_base_path = "~/.adbappbackup"

is_adb_root = False
device_data_list = None
device_tmp_dir_created = False

adb_device = None
adb_transport_id = None

class PackageInfo:
    def __init__(self, package):
        self.package = package
    def collect(self):
        self.apks = adb(["shell", "cmd", "package", "path", self.package]).decode().split("\n")
    def get_apks(self, base_dir):
        apks = []
        for apk in self.apks:
            if apk.startswith("package:"):
                apks.append("{}/{}".format(base_dir, apk[len("package:"):]))
        return apks

def get_effective_device(device):
    global adb_device
    if adb_device == None:
        load_adb_device()
    if device == None:
        device = adb_device
    if device == None:
        raise Exception("Internal error")
    return device

def get_backup_device_path(device = None, offline = False):
    global backup_base_path
    if not offline:
        device = get_effective_device(device)
    return "{}/{}".format(backup_base_path, device)

def get_backed_up_devices():
    global backup_base_path
    try:
        return sorted(os.listdir(backup_base_path))
    except FileNotFoundError:
        return []

def get_backed_up_packages(device):
    backup_device_path = get_backup_device_path(device, offline = True)
    try:
        return sorted(os.listdir(backup_device_path))
    except FileNotFoundError:
        return []

def get_backup_revisions(device, package, offline = False):
    backup_path = get_backup_path(package, device, offline = offline)
    try:
        return sorted(os.listdir(backup_path))
    except FileNotFoundError:
        return []

def get_backup_path(package, device = None, offline = False):
    return "{}/{}".format(get_backup_device_path(device, offline = offline), package)

def select_backup_revision_path(package, device = None):
    backup_path = get_backup_path(package, device)
    paths = get_backup_revisions(device, package)
    if len(paths) == 0:
        print("No backup found for package \"{}\" and device \"{}\"".format(package, get_effective_device(device)))
        sys.exit(1)
    if len(paths) == 1:
        selection = 0
    else:
        selection = None
        while selection == None:
            print("Available backups for {}:".format(package))
            for i in range(0, len(paths)):
                print("{} {}".format(i+1, paths[i]))
            user_in = input("Select backup (1-{}): ".format(len(paths)))
            try:
                user_in = int(user_in)
                if user_in > 0 and user_in <= len(paths):
                    selection = user_in - 1
            except:
                pass
    return "{}/{}".format(backup_path, paths[selection])

def latest_backup_revision_path(package, device = None):
    backup_path = get_backup_path(package, device)
    # revisions are sorted
    paths = get_backup_revisions(device, package)
    if len(paths) == 0:
        print("No backup found for package \"{}\" and device \"{}\"".format(package, get_effective_device(device)))
        sys.exit(1)
    return "{}/{}".format(backup_path, paths[-1])

def get_new_backup_revision_path(package):
    backup_path = get_backup_path(package)
    timeid = datetime.now().strftime("%Y%m%d_%H%M%S")
    return "{}/{}".format(backup_path, timeid)

def run_cmd(cmd):
    debug_out = ">"
    for c in cmd:
        debug_out += " " + c
    print(debug_out, file=sys.stderr)
    return subprocess.check_output(cmd)

def load_adb_device():
    global adb_device, adb_transport_id
    if adb_transport_id != None:
        return
    devices = run_cmd(["adb", "devices", "-l"]).decode().split("\n")
    available = []
    def get_attr(line, attr):
        start_index = line.index(attr + ":") + len(attr) + 1
        try:
            end_index = line.index(" ", start_index)
        except:
            end_index = None
        return line[start_index : end_index]
    for device in devices:
        if "List of devices attached" in device:
            continue
        try:
            a = dict()
            a["serial"] = device[0:device.index(" ")]
            a["product"] = get_attr(device, "product")
            a["model"] = get_attr(device, "model")
            a["transport_id"] = get_attr(device, "transport_id")
            if adb_device == None or adb_device == a["serial"]:
                available.append(a)
        except:
            pass
    if len(available) == 0:
        raise Exception("No device connected to adb")
    if len(available) == 1:
        selection = 0
    else:
        selection = None
        while selection == None:
            for i in range(0, len(available)):
                print("{} {} ({})".format(i+1, available[i]["model"], available[i]["product"]))
            user_in = input("Select device (1-{}): ".format(len(available)))
            try:
                user_in = int(user_in)
                if user_in > 0 and user_in <= len(available):
                    selection = user_in - 1
            except:
                pass
    adb_transport_id = available[selection]["transport_id"]
    if adb_transport_id == None:
        raise Exception("Could not get adb transport id")
    adb_device = available[selection]["serial"]
    if adb_device == None:
        raise Exception("Could not get adb device serial")
    print("Using device {}".format(adb_device), file=sys.stderr)

def adb(cmd):
    global adb_transport_id
    if not isinstance(cmd, list):
        cmd = [cmd]
    if adb_transport_id == None:
        load_adb_device()
    return run_cmd(["adb", "-t", adb_transport_id] + cmd)

def adb_pull(target, backup_path):
    out = "{}/{}".format(backup_path, os.path.dirname(target))
    run_cmd(["mkdir", "-p", out])
    adb(["pull", target, out])

def adb_push(local_target, backup_path):
    target = remote_file_from_backup_file(local_target, backup_path)
    adb(["push", local_target, "/{}".format(target)])

def get_device_tmp_dir():
    global device_tmp_dir_created
    device_tmp_dir = "/sdcard/.adbappbackup"
    if not device_tmp_dir_created:
        try:
            adb(["shell", "rm", "-r", device_tmp_dir])
        except:
            pass
        adb(["shell", "mkdir", "-p", device_tmp_dir])
        device_tmp_dir_created = True
    return device_tmp_dir

def remote_file_from_backup_file(local_target, backup_path):
    if not local_target.startswith(backup_path):
        raise Exception("Internal error")
    return local_target[len(backup_path):]

def is_pushworty(local_target, exclude=[]):
    check_cmd = ["find", local_target, "-type", "f"]
    for exclude_target in exclude:
        check_cmd += ["-not", "-path", "{}/{}".format(local_target, exclude_target)]
    pushable_files = run_cmd(check_cmd).decode().split("\n")
    # Nothing found: result = ['']
    return len(pushable_files) > 1

def adb_push_indirect(local_target, backup_path, exclude=[]):
    if not is_pushworty(local_target, exclude):
        print("Skip pushing {}".format(local_target))
        return
    target = remote_file_from_backup_file(local_target, backup_path)
    device_tmp_dir = get_device_tmp_dir()
    target_base = os.path.basename(target)
    target_dir = os.path.dirname(target)
    adb(["push", local_target, device_tmp_dir])
    for exclude_target in exclude:
        try:
            adb(["shell", "rm", "-r", "{}/{}/{}".format(device_tmp_dir, target_base, exclude_target)])
        except subprocess.CalledProcessError:
            pass
    adb(["shell", "mv", "{}/{}".format(device_tmp_dir, target_base), target_dir])

def permission_ensure():
    global is_adb_root, adb_transport_id
    if not is_adb_root:
        adb("root")
        is_adb_root = True
        # Reload transport id
        adb_transport_id = None
        # adb devices -l might not see our device immediately
        for i in range(0, 10):
            time.sleep(1)
            try:
                load_adb_device()
                break
            except:
                pass
        if adb_transport_id == None:
            # One final try
            load_adb_device()

def adb_list_dir(path):
    # ls would work too, but find is more flexible and returns absolute paths
    return adb(["shell", "find", path, "-maxdepth", "1", "-mindepth", "1"]).decode().split("\n")

def local_list_dir(path):
    # ls would work too, but find is more flexible and returns absolute paths
    return run_cmd(["find", path, "-maxdepth", "1", "-mindepth", "1"]).decode().split("\n")

def get_package_from_appdata(appdata):
    appdata = os.path.basename(appdata)
    return appdata[0:appdata.index("-")]

def get_appdata(package):
    return get_dumpsys_var(package, "codePath")

def get_device_data_list():
    global device_data_list
    if device_data_list == None:
        device_data_list = adb_list_dir("/data/data/")
    return device_data_list

def get_local_data_list(backup_path):
    return local_list_dir("{}/data/data".format(backup_path))

def get_data(data_list, package):
    for data in data_list:
        if os.path.basename(data) == package:
            return data
    raise Exception("No data found for {}".format(package))

def get_dumpsys_var(package, var):
    dumpsys = adb(["shell", "dumpsys", "package", package]).decode()
    for line in dumpsys.split('\n'):
        if f"{var}=" in line:
            return line[line.index("=")+1:]

def get_app_uid(package):
    return int(get_dumpsys_var(package, "userId"))

def get_installed_packages():
    # -3: only support backing up user / third party apps for now
    packages = adb(["shell", "cmd", "package", "list", "packages", "-3"]).decode()
    result = []
    for package in packages.split('\n'):
        if package.startswith("package:"):
            result.append(package.replace("package:", ""))
    return result

def backup_apps(packages, fail = False):
    permission_ensure()
    data_list = get_device_data_list()
    for package in packages:
        try:
            backup_path = get_new_backup_revision_path(package)
            package_info = PackageInfo(package)
            package_info.collect()
            appdata = get_appdata(package)
            data = get_data(data_list, package)
            adb_pull(data, backup_path)
            adb_pull(appdata, backup_path)
            with open("{}/package_info".format(backup_path), "wb") as pif:
                pickle.dump(package_info, pif)
        except subprocess.CalledProcessError as e:
            print("Backup of {} failed".format(package), file=sys.stderr)
            if fail:
                raise e
            traceback.print_exc()

def restore_apps(packages, backup_device = None, latest = False, fail = False, include_apk = True, include_data = True):
    permission_ensure()
    if include_data and not include_apk:
        # TODO find out why - complains about permissions even though they should be fine
        print("WARN: Restoring data only might require a device reboot for apps to function properly afterwards")
    for package in packages:
        try:
            if latest:
                backup_path = latest_backup_revision_path(package, backup_device)
            else:
                backup_path = select_backup_revision_path(package, backup_device)
            if include_apk:
                with open("{}/package_info".format(backup_path), "rb") as pif:
                    package_info = pickle.load(pif)
                # If we do not include data, uninstall would remove present data
                if include_data:
                    try:
                        adb(["uninstall", package])
                    except:
                        pass
                adb(["install-multiple", "-t"] + package_info.get_apks(backup_path))
            if include_data:
                data_list = get_local_data_list(backup_path)
                data = get_data(data_list, package)
                # Freeze app to avoid conflicting data access
                adb(["shell", "pm", "disable", package])
                if not include_apk:
                    # if apk was included, data should be clean either way
                    try:
                        adb(["shell", "rm", "-r", remote_file_from_backup_file(data, backup_path)])
                    except subprocess.CalledProcessError:
                        pass
                # lib is there already after adb install, caches are unnecessary
                adb_push_indirect(data, backup_path, exclude=["cache", "code_cache", "lib"])
                remote_data = remote_file_from_backup_file(data, backup_path)
                # Fix uid
                uid = get_app_uid(package)
                adb(["shell", "chown", "-R", "{}:{}".format(uid, uid), remote_data])
                adb(["shell", "pm", "enable", package])
        except subprocess.CalledProcessError as e:
            print("Restore of {} failed".format(package), file=sys.stderr)
            if fail:
                raise e
            traceback.print_exc()

def list_backups_for_device(device, packages):
    available_packages = get_backed_up_packages(device)
    if len(available_packages) == 0:
        print("No backups yet")
        return
    for package in available_packages:
        if len(packages) > 0 and not package in packages:
            continue
        print(package)
        revisions = get_backup_revisions(device, package, offline = True)
        for revision in revisions:
            print("- {}".format(revision))

def list_installed_packages():
    permission_ensure()
    packages = get_installed_packages()
    for package in sorted(packages):
        print(package)

def list_backups(device = None, packages = []):
    if device != None:
        list_backups_for_device(device, packages)
        return
    devices = get_backed_up_devices()
    if len(devices) == 0:
        print("No backups yet")
        return
    for device in devices:
        print("Backups for device {}".format(device))
        list_backups_for_device(device, packages)
        print()

def clean_backups(device, keep_count, packages):
    if device == None:
        devices = get_backed_up_devices()
    else:
        devices = [device]
    for device in devices:
        if len(packages) == 0:
            dev_packages = get_backed_up_packages(device)
        else:
            dev_packages = packages
        for package in dev_packages:
            backup_path = get_backup_path(package, device, offline = True)
            # revisions are already sorted
            revisions = get_backup_revisions(device, package, offline = True)
            if keep_count == 0:
                to_keep = []
                to_remove = revisions
            else:
                to_keep = revisions[-keep_count:]
                to_remove = revisions[:-keep_count]
            #print(f"{device}/{package}: keep {to_keep}, remove {to_remove}")
            for remove_me in to_remove:
                remove_path = f"{backup_path}/{remove_me}"
                print(f"Remove {remove_path}")
                shutil.rmtree(remove_path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Backup apps + data using adb (root)")
    parser.add_argument("--device", type=str, nargs=1, metavar="SERIAL", help="Device serial (see `adb devices`)", default=[None])
    parser.add_argument("--backup_device", type=str, nargs=1, metavar="SERIAL", help="Device serial for the backup. Set if you want to restore a backup from a different device", default=[None])
    parser.add_argument("--backup_path", type=str, nargs=1, default=[backup_base_path])
    parser.add_argument("--backup", action='store_const', const=True, default=False)
    parser.add_argument("--restore", action='store_const', const=True, default=False, help="Restore given packages: app + data")
    parser.add_argument("--restore_apk", action='store_const', const=True, default=False, help="Restore given packages: app only")
    parser.add_argument("--restore_data", action='store_const', const=True, default=False, help="Restore given packages: data only")
    parser.add_argument("--latest", action='store_const', const=True, default=False, help="Automatically use the latest backup")
    parser.add_argument("--all", action='store_const', const=True, default=False, help="Include all packages detected by --list_packages")
    parser.add_argument("--fail", action='store_const', const=True, default=False, help="Don't continue of one backup/restore failed")
    parser.add_argument("--list_packages", action='store_const', const=True, default=False, help="Output a list of installed packages available for backup. Can be used to create lists for --package_list")
    parser.add_argument("--package_list", metavar="FILE", type=str, nargs=1, default=[None], help="Read packages from FILE")
    parser.add_argument("--keep", type=int, nargs=1, metavar="number", default=[-1], help="Number of old backups to keep. If not set, keep all")
    parser.add_argument("package", type=str, nargs='*')
    args = parser.parse_args()
    backup_base_path = os.path.expanduser(args.backup_path[0])
    done_anything = False
    if args.device[0] != None:
        adb_device = args.device[0]

    if args.package_list[0] != None:
        with open(os.path.expanduser(args.package_list[0]), "r") as infile:
            for package in infile.read().split("\n"):
                if len(package) == 0:
                    continue
                if package[-1] == '\r':
                    package = package[0:-1]
                if len(package) == 0:
                    continue
                args.package.append(package)

    if args.all:
        permission_ensure()
        args.package += get_installed_packages()

    # Device to be used for commands that don't care about backup_device vs device
    prefered_backup_device = args.device[0] if args.backup_device[0] == None else args.backup_device[0]

    # Clean up
    to_keep = args.keep[0]
    if to_keep >= 0:
        clean_backups(prefered_backup_device, to_keep, args.package)
        done_anything = True

    # Backup
    if args.backup:
        backup_apps(args.package, fail=args.fail)
        done_anything = True

    # Restore
    if args.restore or args.restore_apk or args.restore_data:
        include_apk = args.restore or args.restore_apk
        include_data = args.restore or args.restore_data
        restore_apps(args.package, args.backup_device[0], latest=args.latest, fail=args.fail, include_apk=include_apk, include_data=include_data)
        done_anything = True

    if args.list_packages:
        list_installed_packages()
        done_anything = True

    # List
    if not done_anything:
        list_backups(prefered_backup_device, args.package)
